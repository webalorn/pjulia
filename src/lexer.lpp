%{
	#include <cstdio>
	#include <iostream>
	#include <set>
	#include <map>
	#include <string>
	#include "parser.tab.hpp"
	#include "util.hpp"

	std::map<std::string, int> keywords = {
		{"else", ELSE},
		{"elseif", ELSEIF},
		{"end", END},
		{"false", FALSE},
		{"for", FOR},
		{"function", FUNCTION},
		{"if", IF},
		{"mutable", MUTABLE},
		{"return", RETURN},
		{"struct", STRUCT},
		{"true", TRUE},
		{"while", WHILE},
	};
	std::set<std::string> keywordsSemicolon = {
		"true", "false", "return", "end"
	};
	std::map<std::string, int> operators = {
		{"==", OP_EQ},
		{"!=", OP_NEQ},
		{"<", '<'},
		{"<=", OP_LOWER_EQ},
		{">", '>'},
		{">=", OP_GREATER_EQ},
		{"+", '+'},
		{"-", '-'},
		{"*", '*'},
		{"%", '%'},
		{"^", '^'},
		{"&&", OP_AND},
		{"||", OP_OR},
		{"!", '!'},
		{"=", '='},
	};
	bool sendEndSignal = true;
	bool emitSemicolon = false;
	bool justRejected = false;

	static void updateYylloc() {
		static int curr_line = 1;
		static int curr_col  = 1;
		if (justRejected) {
			justRejected = false;
			return;
		}

		yylloc.first_line   = curr_line;
		yylloc.first_column = curr_col;

		for(char* s = yytext; *s; s++){
			if(*s == '\n'){
				curr_line++;
				curr_col = 1;
			} else {
				curr_col++;
			}
		}

		yylloc.last_line   = curr_line;
		yylloc.last_column = curr_col-1;
	}
	#define YY_USER_ACTION updateYylloc();

%}
%option noyywrap
%%
\#[^\n]*$         ; // Comment
[ \t\r]           ;
\n                { if (emitSemicolon) { emitSemicolon = false; return ';'; } }

[0-9]+[a-zA-Z_]([a-zA-Z_0-9])* {
	emitSemicolon = true;
	yylval.repr = strdup(yytext);
	return INT_IDENT;
}
[a-zA-Z_]([a-zA-Z_0-9])*\(     {
	emitSemicolon = false;
	yylval.repr = strdup(yytext);
	return IDENT_LEFT_PAR;
}
[0-9]+\(                       {
	emitSemicolon = false;
	yylval.repr = strdup(yytext);
	return INT_LEFT_PAR;
}
\)[a-zA-Z_]([a-zA-Z_0-9])*     {
	emitSemicolon = true;
	yylval.repr = strdup(yytext);
	return RIGHT_PAR_IDENT;
}

[a-zA-Z_]([a-zA-Z_0-9])* {
	emitSemicolon = false;
	std::string word(yytext);
	yylval.repr = strdup(yytext);
	if (keywords.find(word) == keywords.end()) {
		emitSemicolon = true;
		return IDENT;
	} else {
		if (keywordsSemicolon.find(word) != keywordsSemicolon.end()) {
			emitSemicolon = true;
		}
		return keywords[word];
	}
}
[0-9]+            {
	emitSemicolon = true;
	yylval.repr = strdup(yytext);
	return INT;
}

\"((\\?[ -~]{-}[\\\"])|\\\\|\\\")*\" {
	emitSemicolon = true;
	yylval.repr = strdup(yytext);
	return STRING;
}
[=!<>\-\*\+%^&|]{1,2} {
	emitSemicolon = false;
	std::string word(yytext);
	if (operators.find(word) == operators.end()) {
		justRejected = true;
		REJECT;
	} else {
		return operators[word];
	}
}

\.                { emitSemicolon = false; return '.'; }
\(                { emitSemicolon = false; return '('; }
\)                { emitSemicolon = true;  return ')'; }
:                 { emitSemicolon = false; return ':'; }
;                 { emitSemicolon = false; return ';'; }
,                 { emitSemicolon = false; return ','; }
::                { emitSemicolon = false; return TYPE_SPEC; }

[^ \n\t\r] {
	throw SyntaxError(yylloc, yytext);
}
<<EOF>> {
	if (emitSemicolon) {
		emitSemicolon = false;
		return ';';
	}
	sendEndSignal = !sendEndSignal;
	if (sendEndSignal) {
		yyterminate();
	} else {
		return END_FILE;
	}
}
%%

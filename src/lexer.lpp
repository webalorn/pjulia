%{
	extern "C" int yylex();
	#include <cstdio>
	#include <iostream>
	#include <set>
	#include <string>
	#include "parser.tab.hpp"  // to get the token types from Bison
	#include "util.hpp"

	std::set<std::string> keywords = {
		"else", "elseif", "end", "false", "for",
		"function", "if", "mutable", "return", "struct",
		"true", "while"
	};
	std::set<std::string> keywordsSemicolon = {
		"true", "false", "return", "end"
	};
	std::set<std::string> operators = {
		"==", "!=", "<", "<=", ">", ">=",
		"+", "-", "*", "%", "^", "&&", "||", "!"
	};
	bool sendEndSignal = true;
	bool emitSemicolon = false;

	static void update_loc() {
		static int curr_line = 1;
		static int curr_col  = 1;

		yylloc.first_line   = curr_line;
		yylloc.first_column = curr_col;

		{char * s; for(s = yytext; *s != '\0'; s++){
			if(*s == '\n'){
			curr_line++;
			curr_col = 1;
			}else{
			curr_col++;
			}
		}}

		yylloc.last_line   = curr_line;
		yylloc.last_column = curr_col-1;
	}
	#define YY_USER_ACTION update_loc();

// %option bison-locations
%}
%option noyywrap
%%
\#[^\n]*$         ;
[ \t\r]           ;
\n                { if (emitSemicolon) { emitSemicolon = false; return ';'; }}

[a-zA-Z_]([a-zA-Z_0-9])*[0-9]+ {
	emitSemicolon = true;
	yylval.repr = strdup(yytext);
	return INT_IDENT;
}
[a-zA-Z_]([a-zA-Z_0-9])*\(     {
	emitSemicolon = false;
	yylval.repr = strdup(yytext);
	return IDENT_LEFT_PAR;
}
[0-9]+\(                       {
	emitSemicolon = false;
	yylval.repr = strdup(yytext);
	return INT_LEFT_PAR;
}
\)[a-zA-Z_]([a-zA-Z_0-9])*     {
	emitSemicolon = true;
	yylval.repr = strdup(yytext);
	return RIGHT_PAR_IDENT;
}

[a-zA-Z_]([a-zA-Z_0-9])* {
	emitSemicolon = false;
	std::string word(yytext);
	yylval.repr = strdup(yytext);
	if (keywords.find(word) == keywords.end()) {
		emitSemicolon = true;
		return IDENT;
	} else {
		if (keywordsSemicolon.find(word) != keywordsSemicolon.end()) {
			emitSemicolon = true;
		}
		return KEYWORD;
	}
}
[0-9]+            {
	emitSemicolon = true;
	yylval.repr = strdup(yytext);
	return INT;
}
\"([ -~]{-}[\\\"]|\\\\|\\\"|\\n|\\t)*\" {
	emitSemicolon = true;
	yylval.repr = strdup(yytext);
	return STRING;
}
[=!<>\-\*\+%^&|]{1,2} {
	emitSemicolon = false;
	std::string word(yytext);
	if (operators.find(word) == operators.end()) {
		REJECT;
	} else {
		yylval.repr = strdup(yytext);
		return OPERATOR;
	}
}

\. { return '.'; }
\(                { emitSemicolon = false; return '('; }
\)                { emitSemicolon = true;  return ')'; }
:                 { emitSemicolon = false; return ';'; }
::                { emitSemicolon = false; return ':'; }
=                 { emitSemicolon = false; return '='; }

[^ \n\t\r] {
	throw SyntaxError(yylloc, yytext);
}
<<EOF>> {
	sendEndSignal = !sendEndSignal;
	if (sendEndSignal) {
		yyterminate();
	} else {
		return END_FILE;
	}
}
%%

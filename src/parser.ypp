%require  "3.0"

%code requires {
	#include <deque>
	struct AstNode;
	struct Declaration;
	struct Expr;
	struct LValue;
	struct BinOp;
	struct UnaryOp;
	struct ExprBlock;
	struct CallParamList;
	struct Ident;
	struct Argument;
	struct DefStruct;
	struct DefFunc;

	class ArgumentList;
	class Ast;

	extern "C" int yylex();
}

%{
	#define YYDEBUG 1

	#include <iostream>
	#include "util.hpp"
	#include "comp/ast.hpp"
	#include "parser.tab.hpp"

	extern "C" FILE *yyin;

	void yyerror(Ast* ast, const char *s);

	BinOp* newOp(const YYLTYPE loc, BinaryOperation op, Expr* left, Expr* right) {
		return new BinOp(loc, op, sptOf(left), sptOf(right));
	}
	UnaryOp* newOp(const YYLTYPE loc, UnaryOperation op, Expr* expr) {
		return new UnaryOp(loc, op, sptOf(expr));
	}
%}
%locations
%parse-param {Ast *ast}
// %define parse.lac full
%define parse.error detailed

%union {
	// Input types
	char *repr;

	// Return types
	AstNode* astNode;
	Declaration* astDeclaration;
	Expr* astExpr;
	LValue* astLvalue;
	BinOp* astBinOp;
	UnaryOp* astUnaryOp;
	ExprBlock* astExprBlock;
	CallParamList* astCallArgList;
	Ident* astIdent;
	Argument* astArgument;
	DefStruct* astStructDef;
	ArgumentList* astArgList;
	DefFunc* astFuncDef;
}

%token <repr> INT
%token <repr> STRING
%token <repr> IDENT

%token <repr> INT_IDENT
%token <repr> IDENT_LEFT_PAR
%token <repr> INT_LEFT_PAR
%token <repr> RIGHT_PAR_IDENT

// Keywords
%token ELSE ELSEIF END FALSE FOR FUNCTION IF MUTABLE RETURN STRUCT TRUE WHILE
// Operations [with:   < > + - * % ^ !]
%token OP_EQ OP_NEQ OP_LOWER_EQ OP_GREATER_EQ OP_AND OP_OR
%token TYPE_SPEC // ::
// Other char tokens:   : ; = ( ) . ,
%token END_FILE

%type <astDeclaration> decl
%type <astExpr> maybeExpr expr elseRule
%type <astLvalue> lvalue
%type <astBinOp> binOpRule
%type <astUnaryOp> unaryOpRule
%type <astExprBlock> exprBlock exprBlocLeastOne
%type <astCallArgList> callArgList callArgListLeastOne

%type <astIdent> typeSpec
%type <astArgument> argRule
%type <astStructDef> structRule structDef
%type <astArgList> structArgs funcArgs funcArgsLeastOne
%type <astFuncDef> funcRule

// Precedence
%precedence WITHOUT_OPTIO
%precedence REDUCE_BLOCK_RULE
%precedence FLOW_RULE
%precedence RETURN_RULE

%precedence EMPTY
%right '='
%left OP_AND OP_OR
%nonassoc OP_LOWER_EQ OP_GREATER_EQ '<' '>' OP_EQ OP_NEQ
%left UANRY_MINUS
%left '+' '-'
%left '!'
%left '*' '%'
%left '^'
%left '.'

%start prog_file

%%
prog_file: prog END_FILE {};

prog:
	prog decl {
		if ($2) {
			ast->addDeclaration(sptOf($2));
		}
	}
	| %empty %prec EMPTY {}
;

// Expression, struct or function
decl:
	  maybeExpr  { $$ = $1; }
	| structRule { $$ = $1; }
	| funcRule   { $$ = $1; }
;

// Catch "empty expressions"
maybeExpr:
	';' { $$ = nullptr; }
	| expr ';' { $$ = $1; }
;

exprBlock:
	%empty %prec EMPTY                         { $$ = new ExprBlock(@$); }
	| ';' exprBlock %prec REDUCE_BLOCK_RULE    { $$ = $2; $$->loc = @$; }
	| exprBlocLeastOne %prec REDUCE_BLOCK_RULE { $$ = $1; $$->loc = @$; }
;
exprBlocLeastOne:
	expr %prec REDUCE_BLOCK_RULE { $$ = new ExprBlock(@$); $$->add($1); }
	| expr  ';' exprBlock %prec REDUCE_BLOCK_RULE { $$ = $3; $$->add_front($1); $$->loc = @$; }
;

expr:
	lvalue { $$ = $1; }
	| INT { $$ = new IntConst(@$, $1); free($1); }
	| STRING {
		std::string value($1); // Still need to remove ""
		StrConst* s = new StrConst(@$, std::string($1, 1, value.size()-2));
		s->convertSpecialChars();
		$$ = s;
		free($1);
	}
	| TRUE { $$ = new BoolConst(@$, true); }
	| FALSE { $$ = new BoolConst(@$, false); }
	| INT_IDENT {
		char* splitPt = $1;
		while ('0' <= *splitPt && *splitPt <= '9') {
			splitPt++;
		}
		$$ = new BinOp(@$, OpTimes,
			sptOf(new IntConst(locLeft(@$, splitPt-$1), std::string($1, 0, splitPt-$1))),
			sptOf(new Ident(locRight(@$, splitPt-$1), std::string(splitPt)))
		);
		free($1);
	}
	| INT_LEFT_PAR exprBlocLeastOne ')' {
		std::string intPart($1);
		intPart.pop_back(); // Remove '('
		$$ = new BinOp(@$, OpTimes,
			sptOf(new IntConst(locLeft(@1, intPart.size()), intPart)),
			sptOf($2)
		);
		free($1);
	}
	| '(' exprBlocLeastOne ')' { $$ = $2; }
	| '(' expr RIGHT_PAR_IDENT {
		$$ = new BinOp(@$, OpTimes,
			sptOf($2),
			sptOf(new Ident(locRight(@3, 1), std::string($3+1)))
		);
		free($3);
	}
	| IDENT_LEFT_PAR callArgList ')' {
		std::string indentPart($1);
		indentPart.pop_back(); // Remove '('
		$$ = new CallFunction(@$,
			sptOf(new Ident(locLeft(@1, indentPart.size()), indentPart)),
			sptOf($2)
		);
		free($1);
	}
	| RETURN expr %prec RETURN_RULE { $$ = new ReturnVal(@$, sptOf($2)); }
	| RETURN %prec WITHOUT_OPTIO { $$ = new ReturnVal(@$, nullptr); }
	| binOpRule   { $$ = $1; }
	| unaryOpRule { $$ = $1; }
	// | lvalue '=' expr {
	// 	$$ = new Assignment(@$, sptOf($1), sptOf($3));
	// }
	| expr '=' expr { // Workaround because bison does strange things with %prec
		LValue* lval = dynamic_cast<LValue*>($1);
		if (lval == nullptr) {
			throw ParseError(@2, "Can't assign to an expression");
		} else {
			$$ = new Assignment(@$, sptOf(lval), sptOf($3));
		}
	}

	// Flow control
	| FOR IDENT '=' expr ':' expr exprBlock END %prec FLOW_RULE {
		$$ = new FlowFor(@$, sptOf(new Ident(@2, $2)), sptOf($4),
			sptOf($6), sptOf($7));
		free($2);
	}
	| WHILE expr exprBlock END %prec FLOW_RULE {
		$$ = new FlowWhile(@$, sptOf($2), sptOf($3));
	}
	| IF expr exprBlock elseRule %prec FLOW_RULE {
		$$ = new FlowIfElse(@$, sptOf($2), sptOf($3), sptOf($4));
	}
;

binOpRule:
	  expr '<' expr            { $$ = newOp(@$, OpLower, $1, $3);   }
	| expr '>' expr            { $$ = newOp(@$, OpGreater, $1, $3); }
	| expr '+' expr            { $$ = newOp(@$, OpPlus, $1, $3);    }
	| expr '-' expr            { $$ = newOp(@$, OpMinus, $1, $3);   }
	| expr '*' expr            { $$ = newOp(@$, OpTimes, $1, $3);   }
	| expr '%' expr            { $$ = newOp(@$, OpMod, $1, $3);     }
	| expr '^' expr            { $$ = newOp(@$, OpPower, $1, $3);   }
	| expr OP_EQ expr          { $$ = newOp(@$, OpEq, $1, $3);      }
	| expr OP_NEQ expr         { $$ = newOp(@$, OpNotEq, $1, $3);   }
	| expr OP_LOWER_EQ expr    { $$ = newOp(@$, OpLowerEq, $1, $3); }
	| expr OP_GREATER_EQ expr  { $$ = newOp(@$, OpGreater, $1, $3); }
	| expr OP_AND expr         { $$ = newOp(@$, OpAnd, $1, $3);     }
	| expr OP_OR expr          { $$ = newOp(@$, OpAnd, $1, $3);     }
;

unaryOpRule:
	  '!' expr { $$ = newOp(@$, UnaryNot, $2);   }
	| '-' expr %prec UANRY_MINUS { $$ = newOp(@$, UnaryMinus, $2); }
;

lvalue:
	IDENT { $$ = new Ident(@1, $1); free($1); }
	| expr '.' IDENT {
		$$ = new DotOp(@$, sptOf($1), sptOf(new Ident(@3, $3)));
		free($3);
	}
;

callArgListLeastOne:
	expr { $$ = new CallParamList(@$); $$->add($1); }
	| expr ',' callArgListLeastOne { $$ = $3; $$->add_front($1); }
;
callArgList:
	%empty %prec EMPTY    { $$ = new CallParamList(@$); }
	| callArgListLeastOne { $$ = $1; }
;

elseRule:
	  END                 { $$ = new ExprBlock(@$); } // Empty block
	| ELSE exprBlock END  { $$ = $2; }
	| ELSEIF expr exprBlock elseRule {
		$$ = new FlowIfElse(@$, sptOf($2), sptOf($3), sptOf($4));
	}
	| ELSE IF expr exprBlock elseRule END {
		throw ParseError(@1, "syntax: use \"elseif\" instead of \"else if\"");
	}
;

// TODO : types

typeSpec:
	  %empty %prec EMPTY { $$ = new Ident(@$, "Any");        }
	| TYPE_SPEC IDENT    { $$ = new Ident(@2, $2); free($2); }
;
argRule:
	IDENT typeSpec {
		$$ = new Argument(@$, sptOf(new Ident(@1, $1)), sptOf($2));
		free($1);
	}
;

// Structs
structRule:
	MUTABLE structDef { $$ = $2; $$->isMutable = true; }
	| structDef       { $$ = $1; }
;

structDef:
	STRUCT IDENT structArgs END {
		$$ = new DefStruct(@$, false, sptOf(new Ident(@2, $2)));
		$$->members = *($3);
		free($2); free($3);
	}
;

structArgs:
	%empty %prec EMPTY { $$ = new ArgumentList(); }
	| ';' structArgs   { $$ = $2; }
	| argRule ';' structArgs {
		$$ = $3;
		$$->push_front(sptOf($1));
	}
	| argRule {
		$$ = new ArgumentList();;
		$$->push_front(sptOf($1));
	}
;

// Functions
funcRule:
	FUNCTION IDENT_LEFT_PAR funcArgs ')' typeSpec exprBlock END {
		std::string name($2);
		name.pop_back();
		$$ = new DefFunc(@$, sptOf(new Ident(locLeft(@2, name.size()), name)),
			sptOf($5), spt<ExprBlock>($6));
		$$->args = *($3);
		free($2); free($3);
	}
;
funcArgs:
	%empty %prec EMPTY { $$ = new ArgumentList(); }
	| funcArgsLeastOne { $$ = $1; }
;
funcArgsLeastOne:
	argRule ',' funcArgsLeastOne {
		$$ = $3;
		$$->push_front(sptOf($1));
	}
	| argRule {
		$$ = new ArgumentList();;
		$$->push_front(sptOf($1));
	}
;

%%

void yyerror(Ast*, const char *s) {
	throw ParseError(yylloc, std::string(s));
}

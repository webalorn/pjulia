State 15 conflicts: 13 shift/reduce
State 29 conflicts: 1 shift/reduce
State 108 conflicts: 15 reduce/reduce
State 136 conflicts: 1 shift/reduce


Grammar

    0 $accept: prog_file $end

    1 prog_file: prog END_FILE

    2 prog: prog decl
    3     | %empty

    4 decl: maybeExpr
    5     | structRule
    6     | funcRule

    7 maybeExpr: ';'
    8          | expr ';'

    9 exprBlock: %empty
   10          | ';' exprBlock
   11          | exprBlocLeastOne

   12 exprBlocLeastOne: expr
   13                 | expr ';' exprBlock

   14 expr: lvalue
   15     | INT
   16     | STRING
   17     | TRUE
   18     | FALSE
   19     | INT_IDENT
   20     | INT_LEFT_PAR exprBlocLeastOne ')'
   21     | '(' exprBlocLeastOne ')'
   22     | '(' expr RIGHT_PAR_IDENT
   23     | IDENT_LEFT_PAR callArgList ')'
   24     | RETURN expr
   25     | RETURN
   26     | binOpRule
   27     | unaryOpRule
   28     | lvalue '=' expr
   29     | expr '=' expr
   30     | FOR IDENT '=' expr ':' expr exprBlock END
   31     | WHILE expr exprBlock END
   32     | IF expr exprBlock elseRule

   33 binOpRule: expr '<' expr
   34          | expr '>' expr
   35          | expr '+' expr
   36          | expr '-' expr
   37          | expr '*' expr
   38          | expr '%' expr
   39          | expr '^' expr
   40          | expr OP_EQ expr
   41          | expr OP_NEQ expr
   42          | expr OP_LOWER_EQ expr
   43          | expr OP_GREATER_EQ expr
   44          | expr OP_AND expr
   45          | expr OP_OR expr

   46 unaryOpRule: '!' expr
   47            | '-' expr

   48 lvalue: IDENT
   49       | expr '.' IDENT

   50 callArgListLeastOne: expr
   51                    | expr ',' callArgListLeastOne

   52 callArgList: %empty
   53            | callArgListLeastOne

   54 elseRule: END
   55         | ELSE exprBlock END
   56         | ELSEIF expr exprBlock elseRule
   57         | ELSE IF expr exprBlock elseRule END

   58 typeSpec: %empty
   59         | TYPE_SPEC IDENT

   60 argRule: IDENT typeSpec

   61 structRule: MUTABLE structDef
   62           | structDef

   63 structDef: STRUCT IDENT structArgs END

   64 structArgs: %empty
   65           | ';' structArgs
   66           | argRule ';' structArgs
   67           | argRule

   68 funcRule: FUNCTION IDENT_LEFT_PAR funcArgs ')' typeSpec exprBlock END

   69 funcArgs: %empty
   70         | funcArgsLeastOne

   71 funcArgsLeastOne: argRule ',' funcArgsLeastOne
   72                 | argRule


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 46
    '%' (37) 38
    '(' (40) 21 22
    ')' (41) 20 21 23 68
    '*' (42) 37
    '+' (43) 35
    ',' (44) 51 71
    '-' (45) 36 47
    '.' (46) 49
    ':' (58) 30
    ';' (59) 7 8 10 13 65 66
    '<' (60) 33
    '=' (61) 28 29 30
    '>' (62) 34
    '^' (94) 39
    error (256)
    INT <repr> (258) 15
    STRING <repr> (259) 16
    IDENT <repr> (260) 30 48 49 59 60 63
    INT_IDENT <repr> (261) 19
    IDENT_LEFT_PAR <repr> (262) 23 68
    INT_LEFT_PAR <repr> (263) 20
    RIGHT_PAR_IDENT <repr> (264) 22
    ELSE (265) 55 57
    ELSEIF (266) 56
    END (267) 30 31 54 55 57 63 68
    FALSE (268) 18
    FOR (269) 30
    FUNCTION (270) 68
    IF (271) 32 57
    MUTABLE (272) 61
    RETURN (273) 24 25
    STRUCT (274) 63
    TRUE (275) 17
    WHILE (276) 31
    OP_EQ (277) 40
    OP_NEQ (278) 41
    OP_LOWER_EQ (279) 42
    OP_GREATER_EQ (280) 43
    OP_AND (281) 44
    OP_OR (282) 45
    TYPE_SPEC (283) 59
    END_FILE (284) 1
    WITHOUT_OPTIO (285)
    REDUCE_BLOCK_RULE (286)
    FLOW_RULE (287)
    RETURN_RULE (288)
    UANRY_MINUS (289)


Nonterminals, with rules where they appear

    $accept (50)
        on left: 0
    prog_file (51)
        on left: 1
        on right: 0
    prog (52)
        on left: 2 3
        on right: 1 2
    decl <astDeclaration> (53)
        on left: 4 5 6
        on right: 2
    maybeExpr <astExpr> (54)
        on left: 7 8
        on right: 4
    exprBlock <astExprBlock> (55)
        on left: 9 10 11
        on right: 10 13 30 31 32 55 56 57 68
    exprBlocLeastOne <astExprBlock> (56)
        on left: 12 13
        on right: 11 20 21
    expr <astExpr> (57)
        on left: 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
        on right: 8 12 13 22 24 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 49 50 51 56 57
    binOpRule <astBinOp> (58)
        on left: 33 34 35 36 37 38 39 40 41 42 43 44 45
        on right: 26
    unaryOpRule <astUnaryOp> (59)
        on left: 46 47
        on right: 27
    lvalue <astLvalue> (60)
        on left: 48 49
        on right: 14 28
    callArgListLeastOne <astCallArgList> (61)
        on left: 50 51
        on right: 51 53
    callArgList <astCallArgList> (62)
        on left: 52 53
        on right: 23
    elseRule <astExpr> (63)
        on left: 54 55 56 57
        on right: 32 56 57
    typeSpec <astIdent> (64)
        on left: 58 59
        on right: 60 68
    argRule <astArgument> (65)
        on left: 60
        on right: 66 67 71 72
    structRule <astStructDef> (66)
        on left: 61 62
        on right: 5
    structDef <astStructDef> (67)
        on left: 63
        on right: 61 62
    structArgs <astArgList> (68)
        on left: 64 65 66 67
        on right: 63 65 66
    funcRule <astFuncDef> (69)
        on left: 68
        on right: 6
    funcArgs <astArgList> (70)
        on left: 69 70
        on right: 68
    funcArgsLeastOne <astArgList> (71)
        on left: 71 72
        on right: 70 71


State 0

    0 $accept: • prog_file $end

    $default  reduce using rule 3 (prog)

    prog_file  go to state 1
    prog       go to state 2


State 1

    0 $accept: prog_file • $end

    $end  shift, and go to state 3


State 2

    1 prog_file: prog • END_FILE
    2 prog: prog • decl

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    FUNCTION        shift, and go to state 12
    IF              shift, and go to state 13
    MUTABLE         shift, and go to state 14
    RETURN          shift, and go to state 15
    STRUCT          shift, and go to state 16
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    END_FILE        shift, and go to state 19
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    ';'             shift, and go to state 22
    '('             shift, and go to state 23

    decl         go to state 24
    maybeExpr    go to state 25
    expr         go to state 26
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29
    structRule   go to state 30
    structDef    go to state 31
    funcRule     go to state 32


State 3

    0 $accept: prog_file $end •

    $default  accept


State 4

   15 expr: INT •

    $default  reduce using rule 15 (expr)


State 5

   16 expr: STRING •

    $default  reduce using rule 16 (expr)


State 6

   48 lvalue: IDENT •

    $default  reduce using rule 48 (lvalue)


State 7

   19 expr: INT_IDENT •

    $default  reduce using rule 19 (expr)


State 8

   23 expr: IDENT_LEFT_PAR • callArgList ')'

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    $default  reduce using rule 52 (callArgList)

    expr                 go to state 33
    binOpRule            go to state 27
    unaryOpRule          go to state 28
    lvalue               go to state 29
    callArgListLeastOne  go to state 34
    callArgList          go to state 35


State 9

   20 expr: INT_LEFT_PAR • exprBlocLeastOne ')'

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    exprBlocLeastOne  go to state 36
    expr              go to state 37
    binOpRule         go to state 27
    unaryOpRule       go to state 28
    lvalue            go to state 29


State 10

   18 expr: FALSE •

    $default  reduce using rule 18 (expr)


State 11

   30 expr: FOR • IDENT '=' expr ':' expr exprBlock END

    IDENT  shift, and go to state 38


State 12

   68 funcRule: FUNCTION • IDENT_LEFT_PAR funcArgs ')' typeSpec exprBlock END

    IDENT_LEFT_PAR  shift, and go to state 39


State 13

   32 expr: IF • expr exprBlock elseRule

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 40
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 14

   61 structRule: MUTABLE • structDef

    STRUCT  shift, and go to state 16

    structDef  go to state 41


State 15

   24 expr: RETURN • expr
   25     | RETURN •

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    INT             [reduce using rule 25 (expr)]
    STRING          [reduce using rule 25 (expr)]
    IDENT           [reduce using rule 25 (expr)]
    INT_IDENT       [reduce using rule 25 (expr)]
    IDENT_LEFT_PAR  [reduce using rule 25 (expr)]
    INT_LEFT_PAR    [reduce using rule 25 (expr)]
    FALSE           [reduce using rule 25 (expr)]
    FOR             [reduce using rule 25 (expr)]
    IF              [reduce using rule 25 (expr)]
    RETURN          [reduce using rule 25 (expr)]
    TRUE            [reduce using rule 25 (expr)]
    WHILE           [reduce using rule 25 (expr)]
    '('             [reduce using rule 25 (expr)]
    $default        reduce using rule 25 (expr)

    expr         go to state 42
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 16

   63 structDef: STRUCT • IDENT structArgs END

    IDENT  shift, and go to state 43


State 17

   17 expr: TRUE •

    $default  reduce using rule 17 (expr)


State 18

   31 expr: WHILE • expr exprBlock END

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 44
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 19

    1 prog_file: prog END_FILE •

    $default  reduce using rule 1 (prog_file)


State 20

   47 unaryOpRule: '-' • expr

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 45
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 21

   46 unaryOpRule: '!' • expr

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 46
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 22

    7 maybeExpr: ';' •

    $default  reduce using rule 7 (maybeExpr)


State 23

   21 expr: '(' • exprBlocLeastOne ')'
   22     | '(' • expr RIGHT_PAR_IDENT

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    exprBlocLeastOne  go to state 47
    expr              go to state 48
    binOpRule         go to state 27
    unaryOpRule       go to state 28
    lvalue            go to state 29


State 24

    2 prog: prog decl •

    $default  reduce using rule 2 (prog)


State 25

    4 decl: maybeExpr •

    $default  reduce using rule 4 (decl)


State 26

    8 maybeExpr: expr • ';'
   29 expr: expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    OP_EQ          shift, and go to state 49
    OP_NEQ         shift, and go to state 50
    OP_LOWER_EQ    shift, and go to state 51
    OP_GREATER_EQ  shift, and go to state 52
    OP_AND         shift, and go to state 53
    OP_OR          shift, and go to state 54
    '='            shift, and go to state 55
    '<'            shift, and go to state 56
    '>'            shift, and go to state 57
    '+'            shift, and go to state 58
    '-'            shift, and go to state 59
    '*'            shift, and go to state 60
    '%'            shift, and go to state 61
    '^'            shift, and go to state 62
    '.'            shift, and go to state 63
    ';'            shift, and go to state 64


State 27

   26 expr: binOpRule •

    $default  reduce using rule 26 (expr)


State 28

   27 expr: unaryOpRule •

    $default  reduce using rule 27 (expr)


State 29

   14 expr: lvalue •
   28     | lvalue • '=' expr

    '='  shift, and go to state 65

    '='       [reduce using rule 14 (expr)]
    $default  reduce using rule 14 (expr)


State 30

    5 decl: structRule •

    $default  reduce using rule 5 (decl)


State 31

   62 structRule: structDef •

    $default  reduce using rule 62 (structRule)


State 32

    6 decl: funcRule •

    $default  reduce using rule 6 (decl)


State 33

   29 expr: expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT
   50 callArgListLeastOne: expr •
   51                    | expr • ',' callArgListLeastOne

    OP_EQ          shift, and go to state 49
    OP_NEQ         shift, and go to state 50
    OP_LOWER_EQ    shift, and go to state 51
    OP_GREATER_EQ  shift, and go to state 52
    OP_AND         shift, and go to state 53
    OP_OR          shift, and go to state 54
    '='            shift, and go to state 55
    '<'            shift, and go to state 56
    '>'            shift, and go to state 57
    '+'            shift, and go to state 58
    '-'            shift, and go to state 59
    '*'            shift, and go to state 60
    '%'            shift, and go to state 61
    '^'            shift, and go to state 62
    '.'            shift, and go to state 63
    ','            shift, and go to state 66

    $default  reduce using rule 50 (callArgListLeastOne)


State 34

   53 callArgList: callArgListLeastOne •

    $default  reduce using rule 53 (callArgList)


State 35

   23 expr: IDENT_LEFT_PAR callArgList • ')'

    ')'  shift, and go to state 67


State 36

   20 expr: INT_LEFT_PAR exprBlocLeastOne • ')'

    ')'  shift, and go to state 68


State 37

   12 exprBlocLeastOne: expr •
   13                 | expr • ';' exprBlock
   29 expr: expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    OP_EQ          shift, and go to state 49
    OP_NEQ         shift, and go to state 50
    OP_LOWER_EQ    shift, and go to state 51
    OP_GREATER_EQ  shift, and go to state 52
    OP_AND         shift, and go to state 53
    OP_OR          shift, and go to state 54
    '='            shift, and go to state 55
    '<'            shift, and go to state 56
    '>'            shift, and go to state 57
    '+'            shift, and go to state 58
    '-'            shift, and go to state 59
    '*'            shift, and go to state 60
    '%'            shift, and go to state 61
    '^'            shift, and go to state 62
    '.'            shift, and go to state 63
    ';'            shift, and go to state 69

    $default  reduce using rule 12 (exprBlocLeastOne)


State 38

   30 expr: FOR IDENT • '=' expr ':' expr exprBlock END

    '='  shift, and go to state 70


State 39

   68 funcRule: FUNCTION IDENT_LEFT_PAR • funcArgs ')' typeSpec exprBlock END

    IDENT  shift, and go to state 71

    $default  reduce using rule 69 (funcArgs)

    argRule           go to state 72
    funcArgs          go to state 73
    funcArgsLeastOne  go to state 74


State 40

   29 expr: expr • '=' expr
   32     | IF expr • exprBlock elseRule
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    OP_EQ           shift, and go to state 49
    OP_NEQ          shift, and go to state 50
    OP_LOWER_EQ     shift, and go to state 51
    OP_GREATER_EQ   shift, and go to state 52
    OP_AND          shift, and go to state 53
    OP_OR           shift, and go to state 54
    '='             shift, and go to state 55
    '<'             shift, and go to state 56
    '>'             shift, and go to state 57
    '+'             shift, and go to state 58
    '-'             shift, and go to state 75
    '!'             shift, and go to state 21
    '*'             shift, and go to state 60
    '%'             shift, and go to state 61
    '^'             shift, and go to state 62
    '.'             shift, and go to state 63
    ';'             shift, and go to state 76
    '('             shift, and go to state 23

    $default  reduce using rule 9 (exprBlock)

    exprBlock         go to state 77
    exprBlocLeastOne  go to state 78
    expr              go to state 37
    binOpRule         go to state 27
    unaryOpRule       go to state 28
    lvalue            go to state 29


State 41

   61 structRule: MUTABLE structDef •

    $default  reduce using rule 61 (structRule)


State 42

   24 expr: RETURN expr •
   29     | expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    OP_EQ          shift, and go to state 49
    OP_NEQ         shift, and go to state 50
    OP_LOWER_EQ    shift, and go to state 51
    OP_GREATER_EQ  shift, and go to state 52
    OP_AND         shift, and go to state 53
    OP_OR          shift, and go to state 54
    '='            shift, and go to state 55
    '<'            shift, and go to state 56
    '>'            shift, and go to state 57
    '+'            shift, and go to state 58
    '-'            shift, and go to state 59
    '*'            shift, and go to state 60
    '%'            shift, and go to state 61
    '^'            shift, and go to state 62
    '.'            shift, and go to state 63

    $default  reduce using rule 24 (expr)


State 43

   63 structDef: STRUCT IDENT • structArgs END

    IDENT  shift, and go to state 71
    ';'    shift, and go to state 79

    $default  reduce using rule 64 (structArgs)

    argRule     go to state 80
    structArgs  go to state 81


State 44

   29 expr: expr • '=' expr
   31     | WHILE expr • exprBlock END
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    OP_EQ           shift, and go to state 49
    OP_NEQ          shift, and go to state 50
    OP_LOWER_EQ     shift, and go to state 51
    OP_GREATER_EQ   shift, and go to state 52
    OP_AND          shift, and go to state 53
    OP_OR           shift, and go to state 54
    '='             shift, and go to state 55
    '<'             shift, and go to state 56
    '>'             shift, and go to state 57
    '+'             shift, and go to state 58
    '-'             shift, and go to state 75
    '!'             shift, and go to state 21
    '*'             shift, and go to state 60
    '%'             shift, and go to state 61
    '^'             shift, and go to state 62
    '.'             shift, and go to state 63
    ';'             shift, and go to state 76
    '('             shift, and go to state 23

    $default  reduce using rule 9 (exprBlock)

    exprBlock         go to state 82
    exprBlocLeastOne  go to state 78
    expr              go to state 37
    binOpRule         go to state 27
    unaryOpRule       go to state 28
    lvalue            go to state 29


State 45

   29 expr: expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   47 unaryOpRule: '-' expr •
   49 lvalue: expr • '.' IDENT

    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '%'  shift, and go to state 61
    '^'  shift, and go to state 62
    '.'  shift, and go to state 63

    $default  reduce using rule 47 (unaryOpRule)


State 46

   29 expr: expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   46 unaryOpRule: '!' expr •
   49 lvalue: expr • '.' IDENT

    '*'  shift, and go to state 60
    '%'  shift, and go to state 61
    '^'  shift, and go to state 62
    '.'  shift, and go to state 63

    $default  reduce using rule 46 (unaryOpRule)


State 47

   21 expr: '(' exprBlocLeastOne • ')'

    ')'  shift, and go to state 83


State 48

   12 exprBlocLeastOne: expr •
   13                 | expr • ';' exprBlock
   22 expr: '(' expr • RIGHT_PAR_IDENT
   29     | expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    RIGHT_PAR_IDENT  shift, and go to state 84
    OP_EQ            shift, and go to state 49
    OP_NEQ           shift, and go to state 50
    OP_LOWER_EQ      shift, and go to state 51
    OP_GREATER_EQ    shift, and go to state 52
    OP_AND           shift, and go to state 53
    OP_OR            shift, and go to state 54
    '='              shift, and go to state 55
    '<'              shift, and go to state 56
    '>'              shift, and go to state 57
    '+'              shift, and go to state 58
    '-'              shift, and go to state 59
    '*'              shift, and go to state 60
    '%'              shift, and go to state 61
    '^'              shift, and go to state 62
    '.'              shift, and go to state 63
    ';'              shift, and go to state 69

    $default  reduce using rule 12 (exprBlocLeastOne)


State 49

   40 binOpRule: expr OP_EQ • expr

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 85
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 50

   41 binOpRule: expr OP_NEQ • expr

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 86
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 51

   42 binOpRule: expr OP_LOWER_EQ • expr

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 87
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 52

   43 binOpRule: expr OP_GREATER_EQ • expr

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 88
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 53

   44 binOpRule: expr OP_AND • expr

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 89
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 54

   45 binOpRule: expr OP_OR • expr

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 90
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 55

   29 expr: expr '=' • expr

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 91
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 56

   33 binOpRule: expr '<' • expr

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 92
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 57

   34 binOpRule: expr '>' • expr

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 93
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 58

   35 binOpRule: expr '+' • expr

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 94
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 59

   36 binOpRule: expr '-' • expr

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 95
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 60

   37 binOpRule: expr '*' • expr

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 96
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 61

   38 binOpRule: expr '%' • expr

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 97
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 62

   39 binOpRule: expr '^' • expr

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 98
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 63

   49 lvalue: expr '.' • IDENT

    IDENT  shift, and go to state 99


State 64

    8 maybeExpr: expr ';' •

    $default  reduce using rule 8 (maybeExpr)


State 65

   28 expr: lvalue '=' • expr

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 100
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 66

   51 callArgListLeastOne: expr ',' • callArgListLeastOne

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr                 go to state 33
    binOpRule            go to state 27
    unaryOpRule          go to state 28
    lvalue               go to state 29
    callArgListLeastOne  go to state 101


State 67

   23 expr: IDENT_LEFT_PAR callArgList ')' •

    $default  reduce using rule 23 (expr)


State 68

   20 expr: INT_LEFT_PAR exprBlocLeastOne ')' •

    $default  reduce using rule 20 (expr)


State 69

   13 exprBlocLeastOne: expr ';' • exprBlock

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    ';'             shift, and go to state 76
    '('             shift, and go to state 23

    $default  reduce using rule 9 (exprBlock)

    exprBlock         go to state 102
    exprBlocLeastOne  go to state 78
    expr              go to state 37
    binOpRule         go to state 27
    unaryOpRule       go to state 28
    lvalue            go to state 29


State 70

   30 expr: FOR IDENT '=' • expr ':' expr exprBlock END

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 103
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 71

   60 argRule: IDENT • typeSpec

    TYPE_SPEC  shift, and go to state 104

    $default  reduce using rule 58 (typeSpec)

    typeSpec  go to state 105


State 72

   71 funcArgsLeastOne: argRule • ',' funcArgsLeastOne
   72                 | argRule •

    ','  shift, and go to state 106

    $default  reduce using rule 72 (funcArgsLeastOne)


State 73

   68 funcRule: FUNCTION IDENT_LEFT_PAR funcArgs • ')' typeSpec exprBlock END

    ')'  shift, and go to state 107


State 74

   70 funcArgs: funcArgsLeastOne •

    $default  reduce using rule 70 (funcArgs)


State 75

   36 binOpRule: expr '-' • expr
   47 unaryOpRule: '-' • expr

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 108
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 76

   10 exprBlock: ';' • exprBlock

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    ';'             shift, and go to state 76
    '('             shift, and go to state 23

    $default  reduce using rule 9 (exprBlock)

    exprBlock         go to state 109
    exprBlocLeastOne  go to state 78
    expr              go to state 37
    binOpRule         go to state 27
    unaryOpRule       go to state 28
    lvalue            go to state 29


State 77

   32 expr: IF expr exprBlock • elseRule

    ELSE    shift, and go to state 110
    ELSEIF  shift, and go to state 111
    END     shift, and go to state 112

    elseRule  go to state 113


State 78

   11 exprBlock: exprBlocLeastOne •

    $default  reduce using rule 11 (exprBlock)


State 79

   65 structArgs: ';' • structArgs

    IDENT  shift, and go to state 71
    ';'    shift, and go to state 79

    $default  reduce using rule 64 (structArgs)

    argRule     go to state 80
    structArgs  go to state 114


State 80

   66 structArgs: argRule • ';' structArgs
   67           | argRule •

    ';'  shift, and go to state 115

    $default  reduce using rule 67 (structArgs)


State 81

   63 structDef: STRUCT IDENT structArgs • END

    END  shift, and go to state 116


State 82

   31 expr: WHILE expr exprBlock • END

    END  shift, and go to state 117


State 83

   21 expr: '(' exprBlocLeastOne ')' •

    $default  reduce using rule 21 (expr)


State 84

   22 expr: '(' expr RIGHT_PAR_IDENT •

    $default  reduce using rule 22 (expr)


State 85

   29 expr: expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   40          | expr OP_EQ expr •
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '%'  shift, and go to state 61
    '^'  shift, and go to state 62
    '.'  shift, and go to state 63

    OP_EQ          error (nonassociative)
    OP_NEQ         error (nonassociative)
    OP_LOWER_EQ    error (nonassociative)
    OP_GREATER_EQ  error (nonassociative)
    '<'            error (nonassociative)
    '>'            error (nonassociative)

    $default  reduce using rule 40 (binOpRule)


State 86

   29 expr: expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   41          | expr OP_NEQ expr •
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '%'  shift, and go to state 61
    '^'  shift, and go to state 62
    '.'  shift, and go to state 63

    OP_EQ          error (nonassociative)
    OP_NEQ         error (nonassociative)
    OP_LOWER_EQ    error (nonassociative)
    OP_GREATER_EQ  error (nonassociative)
    '<'            error (nonassociative)
    '>'            error (nonassociative)

    $default  reduce using rule 41 (binOpRule)


State 87

   29 expr: expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   42          | expr OP_LOWER_EQ expr •
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '%'  shift, and go to state 61
    '^'  shift, and go to state 62
    '.'  shift, and go to state 63

    OP_EQ          error (nonassociative)
    OP_NEQ         error (nonassociative)
    OP_LOWER_EQ    error (nonassociative)
    OP_GREATER_EQ  error (nonassociative)
    '<'            error (nonassociative)
    '>'            error (nonassociative)

    $default  reduce using rule 42 (binOpRule)


State 88

   29 expr: expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   43          | expr OP_GREATER_EQ expr •
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '%'  shift, and go to state 61
    '^'  shift, and go to state 62
    '.'  shift, and go to state 63

    OP_EQ          error (nonassociative)
    OP_NEQ         error (nonassociative)
    OP_LOWER_EQ    error (nonassociative)
    OP_GREATER_EQ  error (nonassociative)
    '<'            error (nonassociative)
    '>'            error (nonassociative)

    $default  reduce using rule 43 (binOpRule)


State 89

   29 expr: expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   44          | expr OP_AND expr •
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    OP_EQ          shift, and go to state 49
    OP_NEQ         shift, and go to state 50
    OP_LOWER_EQ    shift, and go to state 51
    OP_GREATER_EQ  shift, and go to state 52
    '<'            shift, and go to state 56
    '>'            shift, and go to state 57
    '+'            shift, and go to state 58
    '-'            shift, and go to state 59
    '*'            shift, and go to state 60
    '%'            shift, and go to state 61
    '^'            shift, and go to state 62
    '.'            shift, and go to state 63

    $default  reduce using rule 44 (binOpRule)


State 90

   29 expr: expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   45          | expr OP_OR expr •
   49 lvalue: expr • '.' IDENT

    OP_EQ          shift, and go to state 49
    OP_NEQ         shift, and go to state 50
    OP_LOWER_EQ    shift, and go to state 51
    OP_GREATER_EQ  shift, and go to state 52
    '<'            shift, and go to state 56
    '>'            shift, and go to state 57
    '+'            shift, and go to state 58
    '-'            shift, and go to state 59
    '*'            shift, and go to state 60
    '%'            shift, and go to state 61
    '^'            shift, and go to state 62
    '.'            shift, and go to state 63

    $default  reduce using rule 45 (binOpRule)


State 91

   29 expr: expr • '=' expr
   29     | expr '=' expr •
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    OP_EQ          shift, and go to state 49
    OP_NEQ         shift, and go to state 50
    OP_LOWER_EQ    shift, and go to state 51
    OP_GREATER_EQ  shift, and go to state 52
    OP_AND         shift, and go to state 53
    OP_OR          shift, and go to state 54
    '='            shift, and go to state 55
    '<'            shift, and go to state 56
    '>'            shift, and go to state 57
    '+'            shift, and go to state 58
    '-'            shift, and go to state 59
    '*'            shift, and go to state 60
    '%'            shift, and go to state 61
    '^'            shift, and go to state 62
    '.'            shift, and go to state 63

    $default  reduce using rule 29 (expr)


State 92

   29 expr: expr • '=' expr
   33 binOpRule: expr • '<' expr
   33          | expr '<' expr •
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '%'  shift, and go to state 61
    '^'  shift, and go to state 62
    '.'  shift, and go to state 63

    OP_EQ          error (nonassociative)
    OP_NEQ         error (nonassociative)
    OP_LOWER_EQ    error (nonassociative)
    OP_GREATER_EQ  error (nonassociative)
    '<'            error (nonassociative)
    '>'            error (nonassociative)

    $default  reduce using rule 33 (binOpRule)


State 93

   29 expr: expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   34          | expr '>' expr •
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '%'  shift, and go to state 61
    '^'  shift, and go to state 62
    '.'  shift, and go to state 63

    OP_EQ          error (nonassociative)
    OP_NEQ         error (nonassociative)
    OP_LOWER_EQ    error (nonassociative)
    OP_GREATER_EQ  error (nonassociative)
    '<'            error (nonassociative)
    '>'            error (nonassociative)

    $default  reduce using rule 34 (binOpRule)


State 94

   29 expr: expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   35          | expr '+' expr •
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    '*'  shift, and go to state 60
    '%'  shift, and go to state 61
    '^'  shift, and go to state 62
    '.'  shift, and go to state 63

    $default  reduce using rule 35 (binOpRule)


State 95

   29 expr: expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   36          | expr '-' expr •
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    '*'  shift, and go to state 60
    '%'  shift, and go to state 61
    '^'  shift, and go to state 62
    '.'  shift, and go to state 63

    $default  reduce using rule 36 (binOpRule)


State 96

   29 expr: expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   37          | expr '*' expr •
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    '^'  shift, and go to state 62
    '.'  shift, and go to state 63

    $default  reduce using rule 37 (binOpRule)


State 97

   29 expr: expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   38          | expr '%' expr •
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    '^'  shift, and go to state 62
    '.'  shift, and go to state 63

    $default  reduce using rule 38 (binOpRule)


State 98

   29 expr: expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   39          | expr '^' expr •
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    '.'  shift, and go to state 63

    $default  reduce using rule 39 (binOpRule)


State 99

   49 lvalue: expr '.' IDENT •

    $default  reduce using rule 49 (lvalue)


State 100

   28 expr: lvalue '=' expr •
   29     | expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    OP_EQ          shift, and go to state 49
    OP_NEQ         shift, and go to state 50
    OP_LOWER_EQ    shift, and go to state 51
    OP_GREATER_EQ  shift, and go to state 52
    OP_AND         shift, and go to state 53
    OP_OR          shift, and go to state 54
    '='            shift, and go to state 55
    '<'            shift, and go to state 56
    '>'            shift, and go to state 57
    '+'            shift, and go to state 58
    '-'            shift, and go to state 59
    '*'            shift, and go to state 60
    '%'            shift, and go to state 61
    '^'            shift, and go to state 62
    '.'            shift, and go to state 63

    $default  reduce using rule 28 (expr)


State 101

   51 callArgListLeastOne: expr ',' callArgListLeastOne •

    $default  reduce using rule 51 (callArgListLeastOne)


State 102

   13 exprBlocLeastOne: expr ';' exprBlock •

    $default  reduce using rule 13 (exprBlocLeastOne)


State 103

   29 expr: expr • '=' expr
   30     | FOR IDENT '=' expr • ':' expr exprBlock END
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    OP_EQ          shift, and go to state 49
    OP_NEQ         shift, and go to state 50
    OP_LOWER_EQ    shift, and go to state 51
    OP_GREATER_EQ  shift, and go to state 52
    OP_AND         shift, and go to state 53
    OP_OR          shift, and go to state 54
    '='            shift, and go to state 55
    '<'            shift, and go to state 56
    '>'            shift, and go to state 57
    '+'            shift, and go to state 58
    '-'            shift, and go to state 59
    '*'            shift, and go to state 60
    '%'            shift, and go to state 61
    '^'            shift, and go to state 62
    '.'            shift, and go to state 63
    ':'            shift, and go to state 118


State 104

   59 typeSpec: TYPE_SPEC • IDENT

    IDENT  shift, and go to state 119


State 105

   60 argRule: IDENT typeSpec •

    $default  reduce using rule 60 (argRule)


State 106

   71 funcArgsLeastOne: argRule ',' • funcArgsLeastOne

    IDENT  shift, and go to state 71

    argRule           go to state 72
    funcArgsLeastOne  go to state 120


State 107

   68 funcRule: FUNCTION IDENT_LEFT_PAR funcArgs ')' • typeSpec exprBlock END

    TYPE_SPEC  shift, and go to state 104

    $default  reduce using rule 58 (typeSpec)

    typeSpec  go to state 121


State 108

   29 expr: expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   36          | expr '-' expr •
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   47 unaryOpRule: '-' expr •
   49 lvalue: expr • '.' IDENT

    '*'  shift, and go to state 60
    '%'  shift, and go to state 61
    '^'  shift, and go to state 62
    '.'  shift, and go to state 63

    ELSE           reduce using rule 36 (binOpRule)
    ELSE           [reduce using rule 47 (unaryOpRule)]
    ELSEIF         reduce using rule 36 (binOpRule)
    ELSEIF         [reduce using rule 47 (unaryOpRule)]
    END            reduce using rule 36 (binOpRule)
    END            [reduce using rule 47 (unaryOpRule)]
    OP_EQ          reduce using rule 36 (binOpRule)
    OP_EQ          [reduce using rule 47 (unaryOpRule)]
    OP_NEQ         reduce using rule 36 (binOpRule)
    OP_NEQ         [reduce using rule 47 (unaryOpRule)]
    OP_LOWER_EQ    reduce using rule 36 (binOpRule)
    OP_LOWER_EQ    [reduce using rule 47 (unaryOpRule)]
    OP_GREATER_EQ  reduce using rule 36 (binOpRule)
    OP_GREATER_EQ  [reduce using rule 47 (unaryOpRule)]
    OP_AND         reduce using rule 36 (binOpRule)
    OP_AND         [reduce using rule 47 (unaryOpRule)]
    OP_OR          reduce using rule 36 (binOpRule)
    OP_OR          [reduce using rule 47 (unaryOpRule)]
    '='            reduce using rule 36 (binOpRule)
    '='            [reduce using rule 47 (unaryOpRule)]
    '<'            reduce using rule 36 (binOpRule)
    '<'            [reduce using rule 47 (unaryOpRule)]
    '>'            reduce using rule 36 (binOpRule)
    '>'            [reduce using rule 47 (unaryOpRule)]
    '+'            reduce using rule 36 (binOpRule)
    '+'            [reduce using rule 47 (unaryOpRule)]
    '-'            reduce using rule 36 (binOpRule)
    '-'            [reduce using rule 47 (unaryOpRule)]
    ';'            reduce using rule 36 (binOpRule)
    ';'            [reduce using rule 47 (unaryOpRule)]
    $default       reduce using rule 36 (binOpRule)


State 109

   10 exprBlock: ';' exprBlock •

    $default  reduce using rule 10 (exprBlock)


State 110

   55 elseRule: ELSE • exprBlock END
   57         | ELSE • IF expr exprBlock elseRule END

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 122
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    ';'             shift, and go to state 76
    '('             shift, and go to state 23

    $default  reduce using rule 9 (exprBlock)

    exprBlock         go to state 123
    exprBlocLeastOne  go to state 78
    expr              go to state 37
    binOpRule         go to state 27
    unaryOpRule       go to state 28
    lvalue            go to state 29


State 111

   56 elseRule: ELSEIF • expr exprBlock elseRule

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 124
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 112

   54 elseRule: END •

    $default  reduce using rule 54 (elseRule)


State 113

   32 expr: IF expr exprBlock elseRule •

    $default  reduce using rule 32 (expr)


State 114

   65 structArgs: ';' structArgs •

    $default  reduce using rule 65 (structArgs)


State 115

   66 structArgs: argRule ';' • structArgs

    IDENT  shift, and go to state 71
    ';'    shift, and go to state 79

    $default  reduce using rule 64 (structArgs)

    argRule     go to state 80
    structArgs  go to state 125


State 116

   63 structDef: STRUCT IDENT structArgs END •

    $default  reduce using rule 63 (structDef)


State 117

   31 expr: WHILE expr exprBlock END •

    $default  reduce using rule 31 (expr)


State 118

   30 expr: FOR IDENT '=' expr ':' • expr exprBlock END

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 126
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 119

   59 typeSpec: TYPE_SPEC IDENT •

    $default  reduce using rule 59 (typeSpec)


State 120

   71 funcArgsLeastOne: argRule ',' funcArgsLeastOne •

    $default  reduce using rule 71 (funcArgsLeastOne)


State 121

   68 funcRule: FUNCTION IDENT_LEFT_PAR funcArgs ')' typeSpec • exprBlock END

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    ';'             shift, and go to state 76
    '('             shift, and go to state 23

    $default  reduce using rule 9 (exprBlock)

    exprBlock         go to state 127
    exprBlocLeastOne  go to state 78
    expr              go to state 37
    binOpRule         go to state 27
    unaryOpRule       go to state 28
    lvalue            go to state 29


State 122

   32 expr: IF • expr exprBlock elseRule
   57 elseRule: ELSE IF • expr exprBlock elseRule END

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    '-'             shift, and go to state 20
    '!'             shift, and go to state 21
    '('             shift, and go to state 23

    expr         go to state 128
    binOpRule    go to state 27
    unaryOpRule  go to state 28
    lvalue       go to state 29


State 123

   55 elseRule: ELSE exprBlock • END

    END  shift, and go to state 129


State 124

   29 expr: expr • '=' expr
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT
   56 elseRule: ELSEIF expr • exprBlock elseRule

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    OP_EQ           shift, and go to state 49
    OP_NEQ          shift, and go to state 50
    OP_LOWER_EQ     shift, and go to state 51
    OP_GREATER_EQ   shift, and go to state 52
    OP_AND          shift, and go to state 53
    OP_OR           shift, and go to state 54
    '='             shift, and go to state 55
    '<'             shift, and go to state 56
    '>'             shift, and go to state 57
    '+'             shift, and go to state 58
    '-'             shift, and go to state 75
    '!'             shift, and go to state 21
    '*'             shift, and go to state 60
    '%'             shift, and go to state 61
    '^'             shift, and go to state 62
    '.'             shift, and go to state 63
    ';'             shift, and go to state 76
    '('             shift, and go to state 23

    $default  reduce using rule 9 (exprBlock)

    exprBlock         go to state 130
    exprBlocLeastOne  go to state 78
    expr              go to state 37
    binOpRule         go to state 27
    unaryOpRule       go to state 28
    lvalue            go to state 29


State 125

   66 structArgs: argRule ';' structArgs •

    $default  reduce using rule 66 (structArgs)


State 126

   29 expr: expr • '=' expr
   30     | FOR IDENT '=' expr ':' expr • exprBlock END
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    OP_EQ           shift, and go to state 49
    OP_NEQ          shift, and go to state 50
    OP_LOWER_EQ     shift, and go to state 51
    OP_GREATER_EQ   shift, and go to state 52
    OP_AND          shift, and go to state 53
    OP_OR           shift, and go to state 54
    '='             shift, and go to state 55
    '<'             shift, and go to state 56
    '>'             shift, and go to state 57
    '+'             shift, and go to state 58
    '-'             shift, and go to state 75
    '!'             shift, and go to state 21
    '*'             shift, and go to state 60
    '%'             shift, and go to state 61
    '^'             shift, and go to state 62
    '.'             shift, and go to state 63
    ';'             shift, and go to state 76
    '('             shift, and go to state 23

    $default  reduce using rule 9 (exprBlock)

    exprBlock         go to state 131
    exprBlocLeastOne  go to state 78
    expr              go to state 37
    binOpRule         go to state 27
    unaryOpRule       go to state 28
    lvalue            go to state 29


State 127

   68 funcRule: FUNCTION IDENT_LEFT_PAR funcArgs ')' typeSpec exprBlock • END

    END  shift, and go to state 132


State 128

   29 expr: expr • '=' expr
   32     | IF expr • exprBlock elseRule
   33 binOpRule: expr • '<' expr
   34          | expr • '>' expr
   35          | expr • '+' expr
   36          | expr • '-' expr
   37          | expr • '*' expr
   38          | expr • '%' expr
   39          | expr • '^' expr
   40          | expr • OP_EQ expr
   41          | expr • OP_NEQ expr
   42          | expr • OP_LOWER_EQ expr
   43          | expr • OP_GREATER_EQ expr
   44          | expr • OP_AND expr
   45          | expr • OP_OR expr
   49 lvalue: expr • '.' IDENT
   57 elseRule: ELSE IF expr • exprBlock elseRule END

    INT             shift, and go to state 4
    STRING          shift, and go to state 5
    IDENT           shift, and go to state 6
    INT_IDENT       shift, and go to state 7
    IDENT_LEFT_PAR  shift, and go to state 8
    INT_LEFT_PAR    shift, and go to state 9
    FALSE           shift, and go to state 10
    FOR             shift, and go to state 11
    IF              shift, and go to state 13
    RETURN          shift, and go to state 15
    TRUE            shift, and go to state 17
    WHILE           shift, and go to state 18
    OP_EQ           shift, and go to state 49
    OP_NEQ          shift, and go to state 50
    OP_LOWER_EQ     shift, and go to state 51
    OP_GREATER_EQ   shift, and go to state 52
    OP_AND          shift, and go to state 53
    OP_OR           shift, and go to state 54
    '='             shift, and go to state 55
    '<'             shift, and go to state 56
    '>'             shift, and go to state 57
    '+'             shift, and go to state 58
    '-'             shift, and go to state 75
    '!'             shift, and go to state 21
    '*'             shift, and go to state 60
    '%'             shift, and go to state 61
    '^'             shift, and go to state 62
    '.'             shift, and go to state 63
    ';'             shift, and go to state 76
    '('             shift, and go to state 23

    $default  reduce using rule 9 (exprBlock)

    exprBlock         go to state 133
    exprBlocLeastOne  go to state 78
    expr              go to state 37
    binOpRule         go to state 27
    unaryOpRule       go to state 28
    lvalue            go to state 29


State 129

   55 elseRule: ELSE exprBlock END •

    $default  reduce using rule 55 (elseRule)


State 130

   56 elseRule: ELSEIF expr exprBlock • elseRule

    ELSE    shift, and go to state 110
    ELSEIF  shift, and go to state 111
    END     shift, and go to state 112

    elseRule  go to state 134


State 131

   30 expr: FOR IDENT '=' expr ':' expr exprBlock • END

    END  shift, and go to state 135


State 132

   68 funcRule: FUNCTION IDENT_LEFT_PAR funcArgs ')' typeSpec exprBlock END •

    $default  reduce using rule 68 (funcRule)


State 133

   32 expr: IF expr exprBlock • elseRule
   57 elseRule: ELSE IF expr exprBlock • elseRule END

    ELSE    shift, and go to state 110
    ELSEIF  shift, and go to state 111
    END     shift, and go to state 112

    elseRule  go to state 136


State 134

   56 elseRule: ELSEIF expr exprBlock elseRule •

    $default  reduce using rule 56 (elseRule)


State 135

   30 expr: FOR IDENT '=' expr ':' expr exprBlock END •

    $default  reduce using rule 30 (expr)


State 136

   32 expr: IF expr exprBlock elseRule •
   57 elseRule: ELSE IF expr exprBlock elseRule • END

    END  shift, and go to state 137

    END       [reduce using rule 32 (expr)]
    $default  reduce using rule 32 (expr)


State 137

   57 elseRule: ELSE IF expr exprBlock elseRule END •

    $default  reduce using rule 57 (elseRule)
